{"version":3,"sources":["components/table.js","components/pagination.js","components/buttons/add.js","components/buttons/match.js","components/assests/header.svg","components/leaderboard.js","App.js","reportWebVitals.js","index.js"],"names":["Table","data","setTotalPage","setTableData","retriveData","setNoOfRows","totalPage","currentPage","setCurrentPage","searchValue","checkedTeam","setCheckedTeam","resetTableColors","style","display","flexDirection","padding","width","cellspacing","cellpadding","className","colSpan","color","retVal","keyVal","len","parseInt","length","count","err","console","log","pageCount","Math","ceil","entry","colorCount","i","push","id","team_name","name","wins","losses","ties","score","tableContent","Pagination","noOfRows","startRow","endRow","setCurrentPageValue","val","alignItems","flexWrap","disabled","onClick","type","min","max","value","onChange","e","target","autoComplete","marginLeft","AddButton","addModalVisible","setAddModalVisible","DATA","useState","setName","Modal","show","onHide","backdrop","keyboard","Header","closeButton","Title","Body","Form","htmlFor","required","marginTop","req","XMLHttpRequest","onreadystatechange","this","readyState","status","dataReceived","responseText","window","location","reload","alert","open","SOURCE","setRequestHeader","send","handleAdd","MatchButton","editModalVisible","setEditModalVisible","teamA","setTeamA","teamB","setTeamB","matchStatus","setMatchStatus","teamsList","setTeamsList","useEffect","document","getElementById","selectedIndex","tempArray","listElements","parsedData","JSON","parse","selected","Leaderboard","tableData","setSearchValue","searchScoreValue","setSearchScoreValue","sortByScore","setSortByScore","skip","justifyContent","margin","src","HeaderImage","alt","marginBottom","placeholder","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.570a2ed3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Table({ data, setTableData, retriveData, setTotalPage,\r\n      totalPage, currentPage, setCurrentPage, searchValue, setNoOfRows,\r\n      checkedTeam, setCheckedTeam, resetTableColors }) {\r\n\r\n      const tableContent = () => {\r\n            const retVal = [];\r\n            let keyVal = 0;\r\n            let len = parseInt(data.length - 1);\r\n            try {\r\n                  len = parseInt(data[0].count);\r\n            }\r\n            catch (err) {\r\n                  console.log(\"another error\");\r\n            }\r\n            setNoOfRows(len);\r\n            let pageCount = 0;\r\n            try {\r\n                  pageCount = Math.ceil(parseInt(data[0].count) / 10);\r\n            }\r\n            catch (err) {\r\n                  console.log(\"In error\");\r\n            }\r\n            if (pageCount === 0) {\r\n                  pageCount = 1;\r\n            }\r\n            setTotalPage(pageCount);\r\n            let colorCount = 0;\r\n            if (len > 0) {\r\n                  let fun = (entry) => {\r\n                        return <tr id={entry.team_name} key={keyVal++} name={colorCount % 2 ? \"even\" : \"odd\"}\r\n                              className={(colorCount++) % 2 ? \"even-row\" : \"odd-row\"}>\r\n                              <td className={\"cell-style\"} key={keyVal++} >{entry.team_name}</td>\r\n                              <td className={\"cell-style\"} key={keyVal++} >{entry.wins}</td>\r\n                              <td className={\"cell-style\"} key={keyVal++} >{entry.losses}</td>\r\n                              <td className={\"cell-style\"} key={keyVal++} >{entry.ties}</td>\r\n                              <td className={\"cell-style\"} key={keyVal++} >{entry.score}</td>\r\n                        </tr >\r\n                  };\r\n                  for (let i = 1; i < parseInt(data.length); ++i) {\r\n                        retVal.push(fun(data[i]));\r\n                  }\r\n            }\r\n            return retVal;\r\n      }\r\n      return (\r\n            <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                  <div style={{ padding: \"0.5%\", width: \"100%\" }} />\r\n                  <table cellspacing=\"0\" cellpadding=\"0\" className=\"table-style\">\r\n                        <tbody>\r\n                              <td colSpan={5}><hr width=\"100%\" color=\"#fc7500\" /></td>\r\n                              <tr >\r\n                                    <td className={\"cell-style\"}>Team Name</td>\r\n                                    <td className={\"cell-style\"}>Wins</td>\r\n                                    <td className={\"cell-style\"}>Losses</td>\r\n                                    <td className={\"cell-style\"}>Ties</td>\r\n                                    <td className={\"cell-style\"}>Score</td>\r\n                              </tr>\r\n                              <td colSpan={5}><hr width=\"100%\" color=\"#fc7500\" /></td>\r\n                              {tableContent()}\r\n                        </tbody >\r\n                  </table>\r\n            </div >\r\n      );\r\n}\r\n\r\nexport default Table;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Pagination({ totalPage, currentPage, setCurrentPage, searchValue, retriveData, noOfRows }) {\r\n      let startRow = 1 + (currentPage - 1) * 10;\r\n      let endRow = (startRow + 9) < noOfRows ? (startRow + 9) : noOfRows;\r\n      if (noOfRows === 0) {\r\n            startRow = 0;\r\n      }\r\n      let setCurrentPageValue = (val) => { //safe-method\r\n            if (val > 0 && val <= totalPage) {\r\n                  setCurrentPage(val);\r\n            }\r\n      }\r\n      return (\r\n            <div style={{ display: \"flex\", flexDirection: \"row\", alignItems: \"center\", flexWrap: \"wrap\" }} >\r\n                  <button disabled={currentPage === 1} className={\"page-button\"}\r\n                        onClick={() => { setCurrentPageValue(1); }}>\r\n                        {\"<<\"}\r\n                        <span className=\"tooltip-text\">\r\n                              First Page\r\n                        </span>\r\n                  </button>\r\n                  <button disabled={currentPage === 1} className={\"page-button\"}\r\n                        onClick={() => { setCurrentPageValue(currentPage - 1); }}>\r\n                        {\"<\"}\r\n                        <span className=\"tooltip-text\" style={{ width: \"62px\" }}>\r\n                              Previous Page\r\n                        </span>\r\n                  </button>\r\n                  <span className={\"pagination-style\"}>Page</span>\r\n                  <input type=\"number\" min=\"1\" max={totalPage} className={\"pageno-input arrow-hidden\"}\r\n                        id=\"current-page\" value={currentPage}\r\n                        onChange={(e) => {\r\n                              setCurrentPageValue(e.target.value);\r\n                        }} autoComplete=\"off\" />\r\n                  <span className={\"pagination-style\"}>of</span>\r\n                  <span className={\"pagination-style\"}>{totalPage}</span>\r\n                  <button disabled={currentPage === totalPage} className={\"page-button\"}\r\n                        onClick={() => { setCurrentPageValue(parseInt(currentPage) + 1); }}>\r\n                        {\">\"}\r\n                        <span className=\"tooltip-text\">\r\n                              Next Page\r\n                        </span>\r\n                  </button>\r\n                  <button disabled={currentPage === totalPage} className={\"page-button\"}\r\n                        onClick={() => { setCurrentPageValue(totalPage); }\r\n                        }>\r\n                        {\">>\"}\r\n                        <span className=\"tooltip-text\">\r\n                              Last Page\r\n                        </span>\r\n                  </button>\r\n                  <div style={{ marginLeft: \"63vw\" }}>\r\n                        Team <span>{startRow}</span>\r\n                        <span>{\"-\" + endRow + \" of \" + noOfRows}</span>\r\n                  </div>\r\n            </div >);\r\n\r\n};\r\n\r\nexport default Pagination;\r\n","import React, { useState } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Modal, Form } from \"react-bootstrap\";\r\n\r\n\r\nconst AddButton = ({ addModalVisible, setAddModalVisible, DATA }) => {\r\n      const [name, setName] = useState(\"\");\r\n\r\n\r\n      const handleClose = () => {\r\n            setName(\"\");\r\n            setAddModalVisible(false);\r\n      }\r\n\r\n      const handleAdd = () => {\r\n            let req = new XMLHttpRequest();\r\n            req.onreadystatechange = function () {\r\n                  if (this.readyState === 4 && this.status === 200) {\r\n                        const dataReceived = this.responseText;\r\n                        if (dataReceived === \"1\") {\r\n                              window.location.reload();\r\n                        }\r\n                        else if (dataReceived === \"2\") {\r\n                              alert(\"Team name already exist\");\r\n                        }\r\n                        else {\r\n                              alert(\"Some Error\");\r\n                        }\r\n                  }\r\n            }\r\n            req.open(\"POST\", DATA.SOURCE + \"AddData\", true);\r\n            req.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\r\n            req.send(\"name=\" + name);\r\n      };\r\n\r\n      return (\r\n            <Modal show={addModalVisible} onHide={handleClose} backdrop={'static'} keyboard={false}>\r\n                  <Modal.Header closeButton>\r\n                        <Modal.Title>ADD TEAM</Modal.Title>\r\n                  </Modal.Header>\r\n                  <Modal.Body>\r\n                        <Form>\r\n                              <table className=\"add-table-style\" cellpadding=\"10px\" cellspacing=\"5px\">\r\n                                    <tr>\r\n                                          <td>\r\n                                                <label htmlFor=\"name\" >Team Name</label>\r\n                                          </td>\r\n                                          <td>\r\n                                                <input className={\"add-input-box arrow-hidden\"} type=\"text\" id=\"team-name\"\r\n                                                      value={name}\r\n                                                      onChange={(e) => { setName(e.target.value); }} required />\r\n                                          </td>\r\n                                    </tr>\r\n                              </table>\r\n                        </Form>\r\n                        <button className=\"add-edit-button\" style={{ marginLeft: \"35%\", marginTop: \"3%\" }}\r\n                              onClick={() => { handleAdd() }} disabled={name === \"\"}>\r\n                              <span className=\"button-text\">\r\n                                    Add\r\n                                    </span>\r\n                        </button>\r\n                  </Modal.Body>\r\n            </Modal >\r\n      );\r\n};\r\n\r\nexport default AddButton;","import React, { useState, useEffect } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Modal, Form} from \"react-bootstrap\";\r\n\r\n\r\nconst MatchButton = ({ editModalVisible, setEditModalVisible, DATA }) => {\r\n      const [teamA, setTeamA] = useState(\"\");\r\n      const [teamB, setTeamB] = useState(\"\");\r\n      const [matchStatus, setMatchStatus] = useState(\"\");\r\n      const [teamsList, setTeamsList] = useState([]);\r\n\r\n\r\n      const handleClose = () => {\r\n            setTeamA(\"\");\r\n            setTeamB(\"\");\r\n            setMatchStatus(\"\");\r\n            setEditModalVisible(false);\r\n      }\r\n\r\n      useEffect(() => {\r\n            if (teamA !== \"\" && teamB !== \"\") {\r\n                  if (teamA === teamB) {\r\n                        setTeamB(\"\");\r\n                        document.getElementById(\"teamB\").selectedIndex = 0;\r\n                        alert(\"Choose different teams\");\r\n                  }\r\n            }\r\n      }, [teamA, teamB])\r\n\r\n      const handleAdd = () => {\r\n            let req = new XMLHttpRequest();\r\n            req.onreadystatechange = function () {\r\n                  if (this.readyState === 4 && this.status === 200) {\r\n                        const dataReceived = this.responseText;\r\n                        console.log(dataReceived);\r\n                        if (dataReceived === \"1\") {\r\n                              window.location.reload();\r\n                        }\r\n                        else if (dataReceived === \"0\") {\r\n                              alert(\"Adding Match Failed\");\r\n                        }\r\n                        else {\r\n                              alert(\"Some Error\");\r\n                        }\r\n                  }\r\n            }\r\n            req.open(\"POST\", DATA.SOURCE + \"AddMatch\", true);\r\n            req.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\r\n            console.log(\"teamA=\" + teamA + \";\" + \"&teamB=\" + teamB + \";\" + \"&status=\" + matchStatus);\r\n            req.send(\"teamA=\" + teamA + \"&teamB=\" + teamB + \"&status=\" + matchStatus);\r\n      };\r\n      let tempArray = [];\r\n\r\n      const listElements = () => {\r\n            for (let i = 1; i < teamsList.length; ++i) {\r\n                  tempArray.push(<option value={teamsList[i]}>{teamsList[i]}</option>);\r\n            }\r\n            return tempArray;\r\n      }\r\n\r\n      useEffect(() => {\r\n            if (editModalVisible) {\r\n                  let req = new XMLHttpRequest();\r\n                  req.onreadystatechange = function () {\r\n                        if (this.readyState === 4 && this.status === 200) {\r\n                              const dataReceived = this.responseText;\r\n                              const parsedData = JSON.parse(dataReceived);\r\n                              setTeamsList(parsedData);\r\n                        }\r\n                  }\r\n                  req.open(\"POST\", DATA.SOURCE + \"TeamsList\", true);\r\n                  req.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\r\n                  req.send();\r\n            }\r\n      }, [editModalVisible]);\r\n\r\n      return (\r\n            <Modal show={editModalVisible} onHide={handleClose} backdrop={'static'} keyboard={false}>\r\n                  <Modal.Header closeButton>\r\n                        <Modal.Title>ADD MATCH</Modal.Title>\r\n                  </Modal.Header>\r\n                  <Modal.Body>\r\n                        <Form>\r\n                              <table className=\"add-table-style\" cellpadding=\"10px\" cellspacing=\"5px\">\r\n                                    <tr>\r\n                                          <td>\r\n                                                <label htmlFor=\"teamA\" >Team-1</label>\r\n                                          </td>\r\n                                          <td>\r\n                                                <select name=\"teamA\" id=\"teamA\"\r\n                                                      onChange={(e) => { setTeamA(e.target.value) }}>\r\n                                                      <option value={\"\"} selected>{\"\"}</option>\r\n                                                      {tempArray.length === 0 ? listElements() : tempArray}\r\n                                                </select>\r\n                                          </td>\r\n                                    </tr>\r\n                                    <tr>\r\n                                          <td>\r\n                                                <label htmlFor=\"teamB\" >Team-2</label>\r\n                                          </td>\r\n                                          <td>\r\n                                                <select name=\"teamB\" id=\"teamB\"\r\n                                                      onChange={(e) => { setTeamB(e.target.value) }}>\r\n                                                      <option value={\"\"} selected>{\"\"}</option>\r\n                                                      {tempArray.length === 0 ? listElements() : tempArray}\r\n                                                </select>\r\n                                          </td>\r\n                                    </tr>\r\n                                    {(teamA !== \"\" && teamB !== \"\") ? < tr >\r\n                                          <td>\r\n                                                <label htmlFor=\"match-status\" >Match Status</label>\r\n                                          </td>\r\n                                          <td>\r\n                                                <select name=\"match-status\" id=\"match-status\"\r\n                                                      onChange={(e) => { setMatchStatus(e.target.value) }}>\r\n                                                      <option value={\"\"} selected>{\"\"}</option>\r\n                                                      <option value={1}>{\"Won by \" + teamA}</option>\r\n                                                      <option value={2}>{\"Won by \" + teamB}</option>\r\n                                                      <option value={0}>Tied</option>\r\n                                                </select>\r\n                                          </td>\r\n                                    </tr > : null\r\n                                    }\r\n                              </table>\r\n                        </Form>\r\n                        <button className=\"add-edit-button\" style={{ marginLeft: \"35%\", marginTop: \"3%\" }}\r\n                              onClick={() => { handleAdd() }} disabled={teamA === \"\" || teamB === \"\" || matchStatus === \"\"}>\r\n                              <span className=\"button-text\">\r\n                                    Add Match\r\n                                    </span>\r\n                        </button>\r\n                  </Modal.Body>\r\n            </Modal >\r\n      );\r\n};\r\n\r\nexport default MatchButton;","export default __webpack_public_path__ + \"static/media/header.6a170b49.svg\";","import React, { useState, useEffect } from 'react';\r\nimport Table from \"./table.js\";\r\nimport Pagination from \"./pagination.js\";\r\nimport AddButton from \"./buttons/add.js\";\r\nimport MatchButton from \"./buttons/match.js\";\r\nimport HeaderImage from \"./assests/header.svg\";\r\n\r\nconst DATA = {\r\n      SOURCE: \"\"\r\n};\r\n\r\nfunction Leaderboard() {\r\n      const [tableData, setTableData] = useState(\"\");\r\n      const [currentPage, setCurrentPage] = useState(1);\r\n      const [totalPage, setTotalPage] = useState(1);\r\n      const [searchValue, setSearchValue] = useState(\"\");\r\n      const [searchScoreValue, setSearchScoreValue] = useState(\"\");\r\n      const [sortByScore, setSortByScore] = useState(true);\r\n      const [noOfRows, setNoOfRows] = useState(0);\r\n      const [addModalVisible, setAddModalVisible] = useState(false);\r\n      const [editModalVisible, setEditModalVisible] = useState(false);\r\n\r\n\r\n      const retriveData = (skip = 0) => {\r\n            let req = new XMLHttpRequest();\r\n            req.onreadystatechange = function () {\r\n                  if (this.readyState === 4 && this.status === 200) {\r\n                        const dataReceived = this.responseText;\r\n                        const parsedData = JSON.parse(dataReceived);\r\n                        //console.log(parsedData);\r\n                        setTableData(parsedData);\r\n                  }\r\n            }\r\n            req.open(\"POST\", DATA.SOURCE + \"FetchData\", true);\r\n            req.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\r\n            req.send(\"team=\" + searchValue + \"&skip=\" + (10 * skip) + \"&score=\" + searchScoreValue + \"&sortby=\" + (sortByScore ? \"1\" : \"0\"));\r\n      };\r\n\r\n      const handleSortBy = (event) => {\r\n            if (event.target.value == \"team_name\") {\r\n                  setSortByScore(false);\r\n            }\r\n            else {\r\n                  setSortByScore(true);\r\n            }\r\n      }\r\n\r\n      useEffect(() => {\r\n            //console.log(\"CurrentPage Effect\");\r\n            retriveData(currentPage - 1);\r\n      }, [currentPage]);\r\n\r\n      useEffect(() => {\r\n            // console.log(\"Search Effect\");\r\n            retriveData(currentPage - 1);\r\n            setCurrentPage(1);\r\n      }, [searchValue, searchScoreValue, sortByScore]);\r\n\r\n      return (\r\n            <>{<><AddButton addModalVisible={addModalVisible} setAddModalVisible={setAddModalVisible} DATA={DATA} />\r\n                  <MatchButton editModalVisible={editModalVisible} setEditModalVisible={setEditModalVisible} DATA={DATA} /></>\r\n            }\r\n                  <div style={{ display: \"flex\", flexDirection: \"column\", justifyContent: \"flex-start\", margin: \"10px\" }}>\r\n                        <div style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"center\" }} >\r\n                              <img src={HeaderImage} alt=\"header\" />\r\n                        </div>\r\n                        <div style={{ display: \"flex\", flexDirection: \"column\", justifyContent: \"space-around\", marginBottom: \"10px\" }} className={\"dashboard\"}>\r\n                              <div style={{ display: \"flex\", flexDirection: \"row\", flexWrap: \"wrap\" }}>\r\n\r\n                                    <div>\r\n                                          <button className=\"add-edit-button\"\r\n                                                onClick={() => { setAddModalVisible(true); }}>\r\n                                                <span className=\"button-text\">\r\n                                                      Add Team\r\n                                          </span>\r\n                                          </button>\r\n                                          <button className=\"add-edit-button\"\r\n                                                onClick={() => { setEditModalVisible(true); }}>\r\n                                                <span className=\"button-text\">\r\n                                                      Add Match\r\n                                                      </span>\r\n                                                <span className=\"tooltip-text\">\r\n                                                      Select a record to edit\r\n                                                      </span>\r\n                                          </button>\r\n                                    </div>\r\n\r\n                              </div>\r\n                              <br />\r\n                              <div style={{ display: \"flex\", flexDirection: \"row\", flexWrap: \"wrap\" }}>\r\n                                    <input type=\"text\" min=\"0\" className={\"search-box arrow-hidden\"} placeholder=\" Search Team Name\"\r\n                                          id=\"search-team\" onChange={(e) => {\r\n                                                setSearchValue(e.target.value);\r\n                                          }} autoComplete=\"off\" />\r\n                                    <input type=\"text\" min=\"0\" className={\"search-box arrow-hidden\"} placeholder=\" Search Score\"\r\n                                          id=\"search-score\" onChange={(e) => {\r\n                                                setSearchScoreValue(e.target.value);\r\n                                          }} autoComplete=\"off\" />\r\n                                    <table style={{ marginTop: \"5px\" }}>\r\n                                          <td>\r\n                                                <label htmlFor=\"sortBy\" className={\"sort-by-input\"}>{\"Sort By :\"} </label>\r\n                                          </td>\r\n                                          <td>\r\n                                                <select name=\"sortBy\" id=\"sortBy\"\r\n                                                      onChange={(e) => { handleSortBy(e); }} className={\"sort-by-input\"}>\r\n                                                      <option value={\"score\"} selected>Score</option>\r\n                                                      <option value={\"team_name\"} >Team Name</option>\r\n                                                </select>\r\n                                          </td>\r\n                                    </table>\r\n\r\n                              </div>\r\n                              <Table data={tableData}\r\n                                    setTableData={setTableData} retriveData={retriveData} setTotalPage={setTotalPage}\r\n                                    totalPage={totalPage} currentPage={currentPage}\r\n                                    setCurrentPage={setCurrentPage} searchValue={searchValue}\r\n                                    setNoOfRows={setNoOfRows} />\r\n                        </div>\r\n                        <Pagination totalPage={totalPage} currentPage={currentPage} setCurrentPage={setCurrentPage}\r\n                              searchValue={searchValue} retriveData={retriveData} noOfRows={noOfRows} />\r\n                  </div>\r\n            </>\r\n      );\r\n}\r\n\r\nexport default Leaderboard;\r\n","import Leaderboard from \"./components/leaderboard.js\";\n\nfunction App() {\n  return (\n    <Leaderboard />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}